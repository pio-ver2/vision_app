import os
import streamlit as st
import base64
from openai import OpenAI

# Estilo visual con tem√°tica oce√°nica
st.markdown("""
    <style>
        body {
            background-color: #e0f7fa;  /* Azul claro del oc√©ano */
            color: #00796b;  /* Texto en verde mar */
        }
        .stTitle {
            color: #004d40;  /* T√≠tulo en verde oc√©ano oscuro */
        }
        .stSubheader {
            color: #0077b6;  /* Azul oc√©ano para los subt√≠tulos */
        }
        .stButton>button {
            background-color: #004d40;  /* Botones de color verde mar */
            color: white;  /* Texto blanco en el bot√≥n */
        }
        .stImage>div>img {
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .stSidebar {
            background-color: #00897b;  /* Barra lateral verde suave */
        }
        .stTextInput>div>div>input {
            background-color: #80d0c7;  /* Fondo de los campos de texto en verde suave */
        }
        .stTextArea>div>div>textarea {
            background-color: #80d0c7;  /* Fondo del √°rea de texto */
        }
    </style>
""", unsafe_allow_html=True)

# T√≠tulo de la aplicaci√≥n con emojis
st.title("üåä **An√°lisis de Imagen: Inteligencia Artificial en Acci√≥n** ü§ñ")

# Mostrar la versi√≥n de Python
st.write("üë®‚Äçüíª **Versi√≥n de Python**:", platform.python_version())

# Cargar y mostrar imagen relacionada con la tecnolog√≠a oce√°nica
try:
    image = Image.open('Chat_pdf.png')  # Aseg√∫rate de que esta imagen est√© disponible
    st.image(image, width=350)
except Exception as e:
    st.warning(f"‚ö†Ô∏è No se pudo cargar la imagen: {e}")

# Barra lateral con descripci√≥n
with st.sidebar:
    st.subheader("üåä **Este agente te ayudar√° a analizar la imagen cargada**")
    st.write("""
    Sube una imagen y pregunta sobre su contenido. El agente procesar√° la imagen usando IA y generar√° respuestas.
    """)

# Clave API de OpenAI
ke = st.text_input('üîë **Ingresa tu Clave de OpenAI**', type="password")
os.environ['OPENAI_API_KEY'] = ke

# Recuperar la clave de API de OpenAI
api_key = os.environ['OPENAI_API_KEY']

# Inicializar cliente de OpenAI
client = OpenAI(api_key=api_key)

# Cargar archivo de imagen
uploaded_file = st.file_uploader("üì• **Sube una imagen**", type=["jpg", "png", "jpeg"])

if uploaded_file:
    # Mostrar imagen cargada
    with st.expander("Imagen cargada", expanded=True):
        st.image(uploaded_file, caption=uploaded_file.name, use_container_width=True)

# Toggle para mostrar detalles adicionales
show_details = st.checkbox("üîç **Pregunta algo espec√≠fico sobre la imagen**", value=False)

if show_details:
    # Entrada de texto para detalles adicionales, solo si se activa el toggle
    additional_details = st.text_area(
        "üìù **A√±ade contexto sobre la imagen aqu√≠**:",
        disabled=not show_details
    )

# Bot√≥n para activar el an√°lisis
analyze_button = st.button("üîç **Analizar Imagen**", type="secondary")

# Verificar si se carg√≥ una imagen, si la clave de API est√° disponible, y si se presion√≥ el bot√≥n
if uploaded_file is not None and api_key and analyze_button:

    with st.spinner("üîÑ **Analizando...**"):
        # Codificar la imagen
        base64_image = encode_image(uploaded_file)
    
        prompt_text = "Describe lo que ves en la imagen en espa√±ol"
    
        if show_details and additional_details:
            prompt_text += (
                f"\n\n**Contexto adicional proporcionado por el usuario:**\n{additional_details}"
            )
    
        
        messages = [
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": prompt_text},
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{base64_image}"
                        }
                    },
                ],
            }
        ]
    
        
        try:
            
            full_response = ""
            message_placeholder = st.empty()
            for completion in client.chat.completions.create(
                model="gpt-4", messages=messages,   
                max_tokens=1200, stream=True
            ):
                if completion.choices[0].delta.content is not None:
                    full_response += completion.choices[0].delta.content
                    message_placeholder.markdown(full_response + "‚ñå")
            
            message_placeholder.markdown(full_response)
    
        except Exception as e:
            st.error(f"‚ùå **Ocurri√≥ un error**: {e}")
else:
    
    if not uploaded_file and analyze_button:
        st.warning("‚ö†Ô∏è **Por favor sube una imagen.**")
    if not api_key:
        st.warning("‚ö†Ô∏è **Por favor ingresa tu clave de API.**")

